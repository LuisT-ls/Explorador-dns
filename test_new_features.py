#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Teste para as Novas Funcionalidades de Seguran√ßa
Explorador DNS - Vers√£o 2.0

Este script testa as 4 novas funcionalidades implementadas:
1. Verifica√ß√£o em m√∫ltiplas blacklists
2. An√°lise de hist√≥rico de malware
3. Verifica√ß√£o de phishing e fraudes
4. Score de reputa√ß√£o baseado em m√∫ltiplas fontes
"""

import sys
import time
from colorama import init, Fore, Style

# Inicializar colorama
init(autoreset=True)


def print_header(text):
    """Imprimir cabe√ßalho formatado"""
    print(f"\n{Fore.BLUE}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}{text:^60}{Style.RESET_ALL}")
    print(f"{Fore.BLUE}{'=' * 60}{Style.RESET_ALL}")


def print_section(text):
    """Imprimir se√ß√£o formatada"""
    print(f"\n{Fore.CYAN}{text}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'-' * len(text)}{Style.RESET_ALL}")


def test_domain_analyzer():
    """Testar o analisador de dom√≠nios com as novas funcionalidades"""
    try:
        from explorador_dns import DomainAnalyzer

        print_header("üß™ TESTANDO NOVAS FUNCIONALIDADES DE SEGURAN√áA")

        # Lista de dom√≠nios para teste
        test_domains = [
            "google.com",  # Dom√≠nio leg√≠timo conhecido
            "example.com",  # Dom√≠nio de exemplo
            "test.com",  # Dom√≠nio de teste
        ]

        print_section("Dom√≠nios de Teste Dispon√≠veis")
        for i, domain in enumerate(test_domains, 1):
            print(f"{i}. {Fore.YELLOW}{domain}{Style.RESET_ALL}")

        print_section("Sele√ß√£o de Dom√≠nio")
        while True:
            try:
                choice = input(
                    f"\nEscolha um dom√≠nio (1-{len(test_domains)}) ou digite um dom√≠nio personalizado: "
                ).strip()

                if choice.isdigit() and 1 <= int(choice) <= len(test_domains):
                    selected_domain = test_domains[int(choice) - 1]
                else:
                    selected_domain = choice

                if selected_domain:
                    break
                else:
                    print(
                        f"{Fore.RED}Por favor, insira um dom√≠nio v√°lido.{Style.RESET_ALL}"
                    )

            except (ValueError, IndexError):
                print(f"{Fore.RED}Escolha inv√°lida. Tente novamente.{Style.RESET_ALL}")

        print(f"\n{Fore.GREEN}Dom√≠nio selecionado: {selected_domain}{Style.RESET_ALL}")

        # Criar inst√¢ncia do analisador
        print_section("Inicializando Analisador")
        analyzer = DomainAnalyzer(selected_domain)
        print(
            f"‚úÖ Analisador inicializado para: {Fore.CYAN}{selected_domain}{Style.RESET_ALL}"
        )

        # Testar cada nova funcionalidade individualmente
        print_header("üîç TESTE 1: Verifica√ß√£o em M√∫ltiplas Blacklists")
        try:
            analyzer.check_multiple_blacklists()
            print(
                f"{Fore.GREEN}‚úÖ Teste de blacklists conclu√≠do com sucesso!{Style.RESET_ALL}"
            )
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erro no teste de blacklists: {e}{Style.RESET_ALL}")

        time.sleep(2)  # Pausa para melhor visualiza√ß√£o

        print_header("ü¶† TESTE 2: An√°lise de Hist√≥rico de Malware")
        try:
            analyzer.analyze_malware_history()
            print(
                f"{Fore.GREEN}‚úÖ Teste de an√°lise de malware conclu√≠do com sucesso!{Style.RESET_ALL}"
            )
        except Exception as e:
            print(
                f"{Fore.RED}‚ùå Erro no teste de an√°lise de malware: {e}{Style.RESET_ALL}"
            )

        time.sleep(2)

        print_header("üé£ TESTE 3: Verifica√ß√£o de Phishing e Fraudes")
        try:
            analyzer.check_phishing_fraud()
            print(
                f"{Fore.GREEN}‚úÖ Teste de verifica√ß√£o de phishing conclu√≠do com sucesso!{Style.RESET_ALL}"
            )
        except Exception as e:
            print(
                f"{Fore.RED}‚ùå Erro no teste de verifica√ß√£o de phishing: {e}{Style.RESET_ALL}"
            )

        time.sleep(2)

        print_header("üìä TESTE 4: Score de Reputa√ß√£o")
        try:
            analyzer.calculate_reputation_score()
            print(
                f"{Fore.GREEN}‚úÖ Teste de score de reputa√ß√£o conclu√≠do com sucesso!{Style.RESET_ALL}"
            )
        except Exception as e:
            print(
                f"{Fore.RED}‚ùå Erro no teste de score de reputa√ß√£o: {e}{Style.RESET_ALL}"
            )

        # Resumo dos testes
        print_header("üìã RESUMO DOS TESTES")
        print(
            f"{Fore.GREEN}‚úÖ Todas as novas funcionalidades foram testadas!{Style.RESET_ALL}"
        )
        print(f"\n{Fore.CYAN}Resultados armazenados em:{Style.RESET_ALL}")
        print(f"  - Blacklists: {len(analyzer.blacklist_results)} resultados")
        print(f"  - Malware: {len(analyzer.malware_analysis)} an√°lises")
        print(f"  - Phishing: {len(analyzer.phishing_indicators)} indicadores")
        print(f"  - Reputa√ß√£o: Score {analyzer.reputation_score}/100")

        return True

    except ImportError as e:
        print(f"{Fore.RED}‚ùå Erro ao importar o m√≥dulo: {e}{Style.RESET_ALL}")
        print(
            f"{Fore.YELLOW}Certifique-se de que o arquivo explorador-dns.py est√° no mesmo diret√≥rio.{Style.RESET_ALL}"
        )
        return False
    except Exception as e:
        print(f"{Fore.RED}‚ùå Erro inesperado: {e}{Style.RESET_ALL}")
        return False


def test_individual_features():
    """Testar funcionalidades individuais"""
    print_header("üîß TESTE DE FUNCIONALIDADES INDIVIDUAIS")

    print_section("1. Teste de Configura√ß√µes")
    try:
        from explorador_dns import (
            BLACKLIST_SERVICES,
            REPUTATION_APIS,
            MALWARE_INDICATORS,
        )

        print(f"‚úÖ BLACKLIST_SERVICES: {len(BLACKLIST_SERVICES)} servi√ßos configurados")
        print(f"‚úÖ REPUTATION_APIS: {len(REPUTATION_APIS)} APIs configuradas")
        print(
            f"‚úÖ MALWARE_INDICATORS: {len(MALWARE_INDICATORS)} indicadores configurados"
        )

        # Mostrar detalhes das configura√ß√µes
        print(f"\n{Fore.CYAN}Servi√ßos de Blacklist:{Style.RESET_ALL}")
        for service, config in BLACKLIST_SERVICES.items():
            if isinstance(config, dict):
                print(f"  - {service}: {len(config)} listas")
            else:
                print(f"  - {service}: {config}")

        print(f"\n{Fore.CYAN}APIs de Reputa√ß√£o:{Style.RESET_ALL}")
        for api, config in REPUTATION_APIS.items():
            print(
                f"  - {api}: {'Requer API Key' if config['api_key_required'] else 'Sem API Key'}"
            )

        return True

    except ImportError as e:
        print(f"{Fore.RED}‚ùå Erro ao importar configura√ß√µes: {e}{Style.RESET_ALL}")
        return False


def main():
    """Fun√ß√£o principal"""
    print_header("üß™ TESTADOR DE NOVAS FUNCIONALIDADES - EXPLORADOR DNS")

    print(
        f"{Fore.CYAN}Este script testa as 4 novas funcionalidades implementadas:{Style.RESET_ALL}"
    )
    print(f"1. {Fore.YELLOW}üîç Verifica√ß√£o em M√∫ltiplas Blacklists{Style.RESET_ALL}")
    print(f"2. {Fore.YELLOW}ü¶† An√°lise de Hist√≥rico de Malware{Style.RESET_ALL}")
    print(f"3. {Fore.YELLOW}üé£ Verifica√ß√£o de Phishing e Fraudes{Style.RESET_ALL}")
    print(f"4. {Fore.YELLOW}üìä Score de Reputa√ß√£o Inteligente{Style.RESET_ALL}")

    print_section("Menu de Testes")
    print("1. Teste Completo (Todas as funcionalidades)")
    print("2. Teste de Configura√ß√µes")
    print("3. Sair")

    while True:
        try:
            choice = input(f"\nEscolha uma op√ß√£o (1-3): ").strip()

            if choice == "1":
                success = test_domain_analyzer()
                if success:
                    print(
                        f"\n{Fore.GREEN}üéâ Todos os testes foram conclu√≠dos com sucesso!{Style.RESET_ALL}"
                    )
                else:
                    print(
                        f"\n{Fore.RED}‚ùå Alguns testes falharam. Verifique os erros acima.{Style.RESET_ALL}"
                    )
                break

            elif choice == "2":
                success = test_individual_features()
                if success:
                    print(
                        f"\n{Fore.GREEN}‚úÖ Configura√ß√µes testadas com sucesso!{Style.RESET_ALL}"
                    )
                else:
                    print(
                        f"\n{Fore.RED}‚ùå Teste de configura√ß√µes falhou.{Style.RESET_ALL}"
                    )
                break

            elif choice == "3":
                print(f"\n{Fore.YELLOW}üëã Saindo do testador...{Style.RESET_ALL}")
                break

            else:
                print(f"{Fore.RED}Op√ß√£o inv√°lida. Escolha 1, 2 ou 3.{Style.RESET_ALL}")

        except KeyboardInterrupt:
            print(
                f"\n\n{Fore.YELLOW}üëã Teste interrompido pelo usu√°rio.{Style.RESET_ALL}"
            )
            break
        except Exception as e:
            print(f"\n{Fore.RED}‚ùå Erro inesperado: {e}{Style.RESET_ALL}")
            break

    print(
        f"\n{Fore.CYAN}Para mais informa√ß√µes, consulte o arquivo NOVAS_FUNCIONALIDADES.md{Style.RESET_ALL}"
    )


if __name__ == "__main__":
    main()
