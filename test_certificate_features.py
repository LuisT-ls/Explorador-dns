#!/usr/bin/env python3
"""
Teste das novas funcionalidades de certificados SSL/TLS
Implementadas no Explorador DNS Avan√ßado

Funcionalidades testadas:
1. Verifica√ß√£o de certificados revogados (CRL/OCSP)
2. An√°lise de cadeia de certificados
3. Verifica√ß√£o de pol√≠ticas de seguran√ßa (HSTS, CSP)
4. Detec√ß√£o de certificados auto-assinados ou inv√°lidos
"""

import sys
import os

# Adicionar o diret√≥rio atual ao path para importar o m√≥dulo principal
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar diretamente do arquivo
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar a classe do arquivo principal
exec(open("explorador-dns.py").read())


def test_certificate_features():
    """Testa as novas funcionalidades de certificados"""
    print("üîí Testando Novas Funcionalidades de Certificados SSL/TLS\n")

    # Dom√≠nios de teste (alguns com diferentes configura√ß√µes de seguran√ßa)
    test_domains = [
        "google.com",  # Dom√≠nio com boa seguran√ßa
        "github.com",  # Dom√≠nio com HSTS e CSP
        "example.com",  # Dom√≠nio b√°sico
    ]

    for domain in test_domains:
        print(f"üåê Testando dom√≠nio: {domain}")
        print("=" * 60)

        try:
            analyzer = DomainAnalyzer(domain)

            # Testar apenas as funcionalidades de certificados
            print("\n1Ô∏è‚É£ Verifica√ß√£o de Revoga√ß√£o de Certificados:")
            analyzer.check_certificate_revocation()

            print("\n2Ô∏è‚É£ An√°lise da Cadeia de Certificados:")
            analyzer.analyze_certificate_chain()

            print("\n3Ô∏è‚É£ Verifica√ß√£o de Pol√≠ticas de Seguran√ßa:")
            analyzer.check_security_policies()

            print("\n4Ô∏è‚É£ Detec√ß√£o de Certificados Auto-assinados:")
            analyzer.detect_self_signed_certificates()

        except Exception as e:
            print(f"‚ùå Erro ao testar {domain}: {e}")

        print("\n" + "=" * 60 + "\n")


def test_specific_domain():
    """Testa um dom√≠nio espec√≠fico fornecido pelo usu√°rio"""
    domain = input("Digite o dom√≠nio para teste espec√≠fico: ").strip()

    if not domain:
        print("‚ùå Dom√≠nio n√£o fornecido")
        return

    try:
        analyzer = DomainAnalyzer(domain)

        print(f"\nüîí Testando funcionalidades de certificados para: {domain}\n")

        # Executar todas as verifica√ß√µes de certificados
        analyzer.check_certificate_revocation()
        analyzer.analyze_certificate_chain()
        analyzer.check_security_policies()
        analyzer.detect_self_signed_certificates()

    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")


def main():
    """Menu principal de teste"""
    print("üîí Testador de Funcionalidades de Certificados SSL/TLS")
    print("=" * 60)

    while True:
        print("\nOp√ß√µes:")
        print("1. Testar dom√≠nios predefinidos")
        print("2. Testar dom√≠nio espec√≠fico")
        print("3. Sair")

        choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()

        if choice == "1":
            test_certificate_features()
        elif choice == "2":
            test_specific_domain()
        elif choice == "3":
            print("üëã Saindo do testador...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")


if __name__ == "__main__":
    main()
